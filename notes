Frecuent errors:

using @variables as variables weren't recognized
when you have an unexpected keyword end, the do is missing
having variables with the same name in the code

question:

why helpers do in the app/helpers and not in the spec/features/helpers

Rspec matchers:

expect{ sign_up }.to change(User, :count).by(1)
expect(page.status_code).to eq(200)

capybara resources:
http://www.elabs.se/blog/51-simple-tricks-to-clean-up-your-capybara-tests



You will see a messags along the lines 'unknown database "pabloportabales"). Let's create that database for you so that you can loging without having to specify the database:

psql postgres

postgres# create database "ecomba";

CREATE DATABASE

postgres# \q

drop database db_name;


cucumber-sinatra init --app  BattleShips lib/battleships.rb

In server.rb:

The second argument to setup() is called a connection string. It has the following format.

dbtype://user:password@hostname:port/databasename

By default Postgres.app is configured to accept connections from a logged in user without the password, so we omit them. Since postgres is running on the default port 5432, it doesn't have to be specified either.


POSTGRESS COMMANDS:

psql:
\list lists all databases
\dt lists all tables in the current database
 psql book_manager_test
 You can use \c db_name to connect to a certain database. 
\d+ tablename  -> table schema

 Use the command \d meaning show all tables, views, and sequences

 o exit the psql terminal, type \q and press enter. Or Ctrl-D does the same thing

rspec --init creates .rspec and spec/spec_helper.rb

rvm install 2.1.3
rvm use --default 2.1.3


capybara can be used with cucumber or rspec, in this project we are using it with rspec, in battlehips we used it with cucumber

 set :views, Proc.new { File.join(root, "..","views") }
 set :public_folder, 'public'
 enable :sessions

 expect(link.tags.map(&:text)).to include("education")

 DataMapper::Loger.new(STDOUT, :debug)

 Link.get(1)

:title.like => 'Data M%'


require 'data_mapper'

A word of caution. If you declare a property, you shouldn't declare an accessor (or reader, or writer) for that property because you'll override datamapper's default functionality. Ruby will not throw any warning in this case. In other words, if you do this:

# this is wrong!
property :description, Text
attr_reader :description

  property :password_digest, Text
 It's Text and not String because String holds


gives you the gem location on your machine --> bundle show sinatra


I want to use this method in several different acceptance tests (they're in different files). What's the best way to include this?
Put your helper to the spec/support folder and do something like this:
module YourHelper
end
RSpec.configure do |config|
	config.include YourHelper, :type => :request
end
type => :feature

In general, there are three levels at which you can and should check for the uniqueness in a well-designed application.

 request to the server to check if the form is valid. 


<% if flash[:errors] && !flash[:errors].empty? %>

rake auto_migrate

Since "signed in" only means that there's a user_id in the session, logging the user out is as simple as setting the session[:user_id] to nil. Let's write a test.

encription:
"string".hash
require 'digest/md5'
 password = Digest::MD5.hexdigest("my password")

 require 'bcrypt'
 BCcrypt::Password.create("secret")

user.create is user.new and user.save at the same time

find in all files in sublime --> cmd + shift + F


add the ssh

git remote -v

HEROKU:
heroku create
heroku apps:rename battleshipsweb
heroku push master
heroku ps:scale web=1
heroku open

heroku addons
heroku config
heroku pg

heroku addons:add heroku-postgresql:hobby-dev
heroku addons:add mailgun

heroku pg:info
heroku pg:psql


You should also add the .bundle directory to your .gitignore file. 

Running bundle install also generates a Gemfile.lock file, which should be added to your git repository. Gemfile.lock ensures that your deployed versions of gems on Heroku match the version installed locally on your development machine. The flag -j4 will use 4 parallel jobs to install all of your dependencies.

An alternative to define helpers for using partials is to use the sinatra-partial gem.

rvm rvmrc warning ignore /Users/pabloportabales/projects/Makers/bookmark_manager/Gemfile

"ignore all files in this directory (/a/b/c/*) but not this one (foo)"

The root cause of my problem: Once Git has begun tracking a file or directory, adding it to .gitignore changes nothing. Git will continue to track the file unless we explicitly tell Git to stop tracking the file.

git rm --cached [filename]

Or, if you want to stop tracking an entire directory (like me in this case)â€¦

1
2
3
$ git rm -r --cached [directoryname]

$ 
The -r flag will tell Git to stop tracking all of the sub-directories and files within directoryname, recursively.

Git was behaving exactly as designed.


to create new pages for your links:

get '/links/new' do
  erb :"links/new", :layout => !request.xhr?
end



spec_helper gets generated by rspec init


require vs require_relative : http://stackoverflow.com/questions/3672586/what-is-the-difference-between-require-relative-and-require-in-ruby

Create an environment variable pointing to your local database:

$ export DATABASE_URL=postgres://localhost/bookmark_manager_test


http://boorkmarkmanagment.herokuapp.com/ 

 xxxxx if rack env = production
env == production

heroku logs

gem forman

forman ruby serverfile

xpath
nokogiri

geo gems
geocoder --> location

git push heroku master
heroku open
heroku run rake auto_migrate
heroku open


https://github.com/alexpeattie/heroku_secrets

gitignore: https://devcenter.heroku.com/articles/gitignore










